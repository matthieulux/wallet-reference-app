[{"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/index.js":"1","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/App.js":"2","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Theme/theme.js":"3","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Theme/Theme.js":"4","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/Header.js":"5","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/Wallet.js":"6","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/CreateWallet.js":"7","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/ListWallets.js":"8","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Context/ContextProvider.js":"9","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Context/Context.js":"10","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/WalletDetails.js":"11","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/Alert.js":"12","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/CredentialDialog.js":"13","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/SuccessSnackbar.js":"14","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/WalletActions.js":"15","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/AcceptConnection.js":"16","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/CredentialList.js":"17","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/LoadingBackdrop.js":"18","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/CredentialDetailsDialog.js":"19","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/CredentialVerificationDialog.js":"20","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/useInterval.js":"21"},{"size":186,"mtime":1606495586890,"results":"22","hashOfConfig":"23"},{"size":731,"mtime":1606927902211,"results":"24","hashOfConfig":"23"},{"size":174,"mtime":1606348457101,"results":"25","hashOfConfig":"26"},{"size":259,"mtime":1606756415660,"results":"27","hashOfConfig":"23"},{"size":1154,"mtime":1606942548449,"results":"28","hashOfConfig":"23"},{"size":951,"mtime":1606944789883,"results":"29","hashOfConfig":"23"},{"size":1906,"mtime":1607042157176,"results":"30","hashOfConfig":"23"},{"size":2854,"mtime":1607041881326,"results":"31","hashOfConfig":"23"},{"size":1926,"mtime":1607041881290,"results":"32","hashOfConfig":"23"},{"size":93,"mtime":1606494379472,"results":"33","hashOfConfig":"23"},{"size":2500,"mtime":1607041881289,"results":"34","hashOfConfig":"23"},{"size":180,"mtime":1606776841366,"results":"35","hashOfConfig":"23"},{"size":1642,"mtime":1607035248166,"results":"36","hashOfConfig":"23"},{"size":387,"mtime":1606926475545,"results":"37","hashOfConfig":"23"},{"size":6226,"mtime":1607041881289,"results":"38","hashOfConfig":"23"},{"size":2186,"mtime":1607041881289,"results":"39","hashOfConfig":"23"},{"size":3465,"mtime":1607041881289,"results":"40","hashOfConfig":"23"},{"size":576,"mtime":1606926615437,"results":"41","hashOfConfig":"23"},{"size":1676,"mtime":1607041461044,"results":"42","hashOfConfig":"23"},{"size":1266,"mtime":1607100603629,"results":"43","hashOfConfig":"23"},{"size":477,"mtime":1607036648860,"results":"44","hashOfConfig":"23"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"1m29c9i",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1supv1",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"47"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"47"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"47"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"47"},"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/index.js",[],["95","96"],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/App.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Theme/theme.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Theme/Theme.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/Header.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/Wallet.js",["97","98"],"import React, { useContext } from 'react'\nimport { Grid, makeStyles, Paper } from '@material-ui/core'\nimport CreateWallet from './CreateWallet'\nimport ListWallets from './ListWallets'\nimport AppContext from '../Context/Context'\n\nconst useStyles = makeStyles(theme => ({\n    section: {\n        margin: theme.spacing(3),\n        padding: theme.spacing(2)\n    }\n}))\n\nexport default function Wallet() {\n    const classes = useStyles()\n\n    return (\n        <React.Fragment>\n            <Grid container spacing={1} justify='center'>\n                <Grid item lg={3}>\n                    <Paper className={classes.section}>\n                        <CreateWallet />\n                    </Paper>\n                </Grid>\n                <Grid item lg={6}>\n                    <Paper className={classes.section}>\n                        <ListWallets />\n                    </Paper>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    )\n}\n","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/CreateWallet.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/ListWallets.js",["99"],"import React, { useContext, useEffect } from 'react'\nimport { Typography, TableContainer, Table, TableHead, TableCell, TableBody, TableRow, IconButton, Paper } from '@material-ui/core'\nimport axios from 'axios'\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline'\nimport AppContext from '../Context/Context'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport { useHistory } from 'react-router-dom'\n\nexport default function ListWallets() {\n\n    const context = useContext(AppContext)\n    const history = useHistory()\n\n    useEffect(() => {\n        context.getWallets()\n    }, [])\n\n    const deleteWallet = async (walletId) => {\n        context.handleBackdrop(true)\n        const response = await axios.post('/api/deleteWallet/', { walletId: walletId })\n        console.log(response)\n        context.getWallets()\n        context.handleBackdrop(false)\n    }\n\n    return (\n        <React.Fragment>\n            <Typography variant='h5' align='center'>\n                Your Wallets\n            </Typography>\n            <TableContainer style={{marginTop: '1rem'}} component={Paper}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                Wallet ID\n                            </TableCell>\n                            <TableCell>\n                                Name\n                            </TableCell>\n                            <TableCell />\n                            <TableCell />\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {context.wallets.map(wallet => (\n                            <TableRow key={wallet.walletId}>\n                                <TableCell>\n                                    {wallet.walletId}\n                                </TableCell>\n                                <TableCell>\n                                    {wallet.name}\n                                </TableCell>\n                                <TableCell>\n                                    <IconButton color='secondary' onClick={() => deleteWallet(wallet.walletId)}>\n                                        <DeleteOutlineIcon />\n                                    </IconButton>\n                                </TableCell>\n                                <TableCell>\n                                    <IconButton color='primary' onClick={() => history.push(`/wallets/${wallet.walletId}`)}>\n                                        <ChevronRightIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </React.Fragment>\n    )\n}\n","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Context/ContextProvider.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Context/Context.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/WalletDetails.js",["100","101","102","103"],"import React, { useContext, useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport AppContext from '../Context/Context'\nimport { Grid, makeStyles, Typography, Paper, Link, IconButton } from '@material-ui/core'\nimport axios from 'axios'\nimport RefreshIcon from '@material-ui/icons/Refresh'\nimport WalletActions from './WalletActions'\nimport AcceptConnection from './AcceptConnection'\nimport CredentialList from './CredentialList'\n\nconst useStyles = makeStyles(theme => ({\n    section: {\n        margin: theme.spacing(3),\n        padding: theme.spacing(2)\n    }\n}))\n\nexport default function WalletDetails() {\n    const classes = useStyles()\n    const { id } = useParams()\n    const context = useContext(AppContext)\n    const history = useHistory()\n\n    const [currentWallet, setCurrentWallet] = useState({\n        walletId: '1',\n        ownerName: 'Name'\n    })\n\n    useEffect(() => {\n        context.handleBackdrop(true)\n        fetchData()\n        setTimeout(() => {\n            context.handleBackdrop(false)\n        }, 3000)\n    }, [])\n\n    const fetchData = async () => {\n        const wallets = await axios.get('/api/listWallets/')\n        const wal = wallets.data.filter(wallet => wallet.walletId === id)[0]\n        setCurrentWallet(wal)\n    }\n\n    const refresh = async () => {\n        context.handleBackdrop(true)\n        context.handleBackdrop(false)\n    }\n\n    return (\n        <React.Fragment>\n            <Typography onClick={e => history.push('/')} variant='body1' color='primary' style={{position: 'absolute'}}>\n                <Link href='#'>Back To Home</Link>\n            </Typography>\n            <Grid container spacing={0} justify='center' >\n                <Grid item lg={8}>\n                    <Paper className={classes.section}>\n                        <Typography align='center' variant='h5'>\n                            {currentWallet.name}\n                        </Typography>\n                        <Grid container spacing={3}>\n                            <Grid item md={6}>\n                                <WalletActions walletId={id} />\n                                <AcceptConnection walletId={id} />\n                            </Grid>\n                            <Grid item md={6}>\n                                <CredentialList walletId={id} />\n                            </Grid>\n                        </Grid>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    )\n}","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/Alert.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/CredentialDialog.js",["104"],"import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, TableCell, TableContainer, Table, TableRow, Paper, Button, TableBody, DialogActions, Typography } from '@material-ui/core'\n\nexport default function CredentialDialog(props) {\n    return (\n        <Dialog open={props.open} onClose={props.close}>\n                <DialogTitle>\n                    {props.currentAction.schemaId.split(':')[2]}\n                </DialogTitle>\n                <DialogContent>\n                    <TableContainer style={{backgroundColor: '#F9FAFB'}} component={Paper}>\n                        <Table size='small'>\n                            <TableBody>\n                                {Object.entries(props.currentAction.values).map(([key, value]) => (\n                                    <TableRow key={key}>\n                                        <TableCell>\n                                            {key}\n                                        </TableCell>\n                                        <TableCell>\n                                            {value}\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant='contained' onClick={props.close}>Cancel</Button>\n                    <Button variant='contained' onClick={props.accept} autoFocus color='primary'>Accept</Button>\n                </DialogActions>\n            </Dialog>\n    )\n}\n","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/SuccessSnackbar.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/WalletActions.js",["105"],"import React, { useContext, useState } from 'react'\nimport { Typography, TableContainer, TableBody, Table, TableRow, TableCell, Paper, IconButton } from '@material-ui/core'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport CredentialDialog from './CredentialDialog'\nimport AppContext from '../Context/Context'\nimport axios from 'axios'\nimport CredentialVerificationDialog from './CredentialVerificationDialog'\nimport useInterval from './useInterval'\n\n\nexport default function WalletActions(props) {\n\n    const context = useContext(AppContext)\n\n    const [availableCredentials, setAvailableCredentials] = useState({\n        availableCredentials: []\n    })\n\n    const [credentialActions, setCredentialActions] = useState([])\n\n    const [currentVerification, setCurrentVerification] = useState({\n        policy: {\n            name: ''\n        }\n    })\n\n    const [currentAction, setCurrentAction] = useState({\n        schemaId: '',\n        values: {\n            'First Name': 'Trinsic'\n        }\n    })\n\n    const [openActionDialog, setOpenActionDialog] = useState(false)\n\n    const [openVerificationDialog, setOpenVerificationDialog] = useState(false)\n\n    const [verificationActions, setVerificationActions] = useState([])\n\n    const getActions = async () => {\n        const actions = await axios.get(`/api/listCredentials/${props.walletId}`)\n        const verifications = await axios.get(`/api/listVerifications/${props.walletId}`)\n        setVerificationActions(verifications.data.filter(verification => verification.state === 'Requested'))\n        setCredentialActions(actions.data.filter(cred => cred.state === 'Offered'))        \n    }\n\n    const getAvailableCredentials = async (verificationId) => {\n        const possibleCredentials = await axios.get(`/api/listAvailableCredentials/${props.walletId}/${verificationId}`)\n        setAvailableCredentials(possibleCredentials.data[0])\n    }\n\n    const handleOpenActionDialog = (action) => {\n        setCurrentAction(action)\n        setOpenActionDialog(true)\n    }\n\n    const handleCloseActionDialog = () => {\n        setOpenActionDialog(false)\n    }\n\n    const handleCredentialAccept = async () => {\n        context.handleBackdrop(true)\n        handleCloseActionDialog()\n        const response = await axios.post(`/api/acceptCredential/${props.walletId}/${currentAction.credentialId}/`)\n        console.log('acceptance', response.data)\n        let actions = credentialActions\n        actions = actions.filter(action => action.credentialId != currentAction.credentialId)\n        setCredentialActions(actions)\n        await context.getCredentials(props.walletId)\n        context.handleBackdrop(false)\n    }\n\n    const handleVerificationCloseDialog = () => {\n        setOpenVerificationDialog(false)\n    }\n\n    const handleVerificationOpenDialog = async (verification) => {\n        context.handleBackdrop(true)\n        await getAvailableCredentials(verification.verificationId)\n        setCurrentVerification(verification)\n        setOpenVerificationDialog(true)\n        context.handleBackdrop(false)\n    }\n\n    const proveVerificationRequest = async (verificationId) => {\n        handleVerificationCloseDialog()\n        const response = await axios.post(`/api/submitVerification/${props.walletId}/${verificationId}`)\n        console.log(response)\n    }\n\n    useInterval(() => {\n        getActions()\n    }, 2000)\n\n    return (\n        <React.Fragment>\n            <Typography align='center' variant='h6'>\n                Actions\n            </Typography>\n            <TableContainer style={{marginTop: '0.5rem'}} component={Paper}>\n                <Table>\n                    <TableBody>\n                    {credentialActions.map(credential => (\n                        <TableRow key={credential.credentialId}>\n                            <TableCell>\n                                <Typography variant='body1' color='primary'>\n                                    Credential Offer\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant='body1' style={{color: '#5F7186'}}>\n                                    {credential.schemaId.split(':')[2]}\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <IconButton onClick={() => handleOpenActionDialog(credential)} color='primary'>\n                                    <ChevronRightIcon />\n                                </IconButton>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                    {verificationActions.map(verification => (\n                        <TableRow key={verification.verificationId}>\n                            <TableCell>\n                                <Typography variant='body1' color='primary'>\n                                    Credential Verification Request\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant='body1' style={{color: '#5F7186'}}>\n                                    {verification.policy.name}\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <IconButton onClick={() => handleVerificationOpenDialog(verification)} color='primary'>\n                                    <ChevronRightIcon />\n                                </IconButton>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <CredentialDialog open={openActionDialog} close={handleCloseActionDialog} currentAction={currentAction} accept={handleCredentialAccept} />\n            <CredentialVerificationDialog open={openVerificationDialog} close={handleVerificationCloseDialog} currentAction={currentVerification} availableCredentials={availableCredentials} prove={proveVerificationRequest} />\n        </React.Fragment>\n    )\n}\n","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/AcceptConnection.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/CredentialList.js",["106","107","108"],"import React, { useContext, useEffect, useState } from 'react'\nimport { Typography, TableContainer, Table, TableBody, TableRow, TableCell, IconButton, Paper } from '@material-ui/core'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport AppContext from '../Context/Context'\nimport axios from 'axios'\nimport CredentialDetailsDialog from './CredentialDetailsDialog'\nimport useInterval from './useInterval'\n\nexport default function CredentialList(props) {\n\n    const context = useContext(AppContext)\n\n    const [credentials, setCredentials] = useState([])\n\n    const [connections, setConnections] = useState([])\n\n    const [currentCredential, setCurrentCredential] = useState({\n        schemaId: '1',\n        values: {\n\n        }\n    })\n\n    const [credentialDialogOpen, setCredentialDialogOpen] = useState(false)\n\n    const handleCredentialDialogClose = () => {\n        setCredentialDialogOpen(false)\n    }\n\n    const showDetails = async (e, credentialId) => {\n        const credential = credentials.filter(cred => cred.credentialId === credentialId)[0]\n        setCurrentCredential(credential)\n        setCredentialDialogOpen(true)\n    }\n\n    const getCredentials = async (walletId) => {\n        const creds = await axios.get(`/api/listCredentials/${walletId}`)\n        const connections = await axios.get(`/api/listConnections/${walletId}`)\n        let credentialsWithConnections = creds.data.filter(cred => cred.state === 'Issued')\n        for(let cred of credentialsWithConnections) {\n            cred['connectionName'] = connections.data.filter(connection => connection.connectionId === cred.connectionId)[0].name\n        }\n        setCredentials(credentialsWithConnections)\n        setConnections(connections.data)\n    }\n\n\n    useInterval(() => {\n        getCredentials(props.walletId)\n    }, 2000)\n\n    return (\n        <React.Fragment>\n            <Typography align='center' variant='h6'>\n                Credentials\n            </Typography>\n            <TableContainer style={{marginTop: '0.5rem'}} component={Paper}>\n                <Table>\n                    <TableBody>\n                        {credentials.map(credential => (\n                            <TableRow key={credential.credentialId}>\n                                <TableCell>\n                                    <Typography variant='body1' color='primary'>\n                                        {credential.schemaId.split(':')[2]}\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='body1' style={{color: '#5F7186'}}>\n                                        {credential.connectionName}\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <IconButton color='primary' onClick={e => showDetails(e, credential.credentialId)}>\n                                        <ChevronRightIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <CredentialDetailsDialog credential={currentCredential} open={credentialDialogOpen} close={handleCredentialDialogClose} />\n        </React.Fragment>\n    )\n}\n","/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/LoadingBackdrop.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/CredentialDetailsDialog.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/CredentialVerificationDialog.js",[],"/Users/gagepoulson/Trinsic/wallet-reference-app/frontend/src/Components/useInterval.js",["109","110"],"import React, { useState, useEffect, useRef } from 'react'\n\nexport default function useInterval(callback, delay) {\n    const savedCallback = useRef()\n\n    useEffect(() => {\n        savedCallback.current = callback\n    }, [callback])\n\n    useEffect(() => {\n        function tick() {\n            savedCallback.current()\n        }\n        if (delay !== null) {\n            const id = setInterval(tick, delay)\n            return () => clearInterval(id)\n        }\n    }, [delay])\n}\n",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":27},{"ruleId":"115","severity":1,"message":"119","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":18},{"ruleId":"120","severity":1,"message":"121","line":16,"column":8,"nodeType":"122","endLine":16,"endColumn":10,"suggestions":"123"},{"ruleId":"115","severity":1,"message":"124","line":4,"column":53,"nodeType":"117","messageId":"118","endLine":4,"endColumn":63},{"ruleId":"115","severity":1,"message":"125","line":6,"column":8,"nodeType":"117","messageId":"118","endLine":6,"endColumn":19},{"ruleId":"120","severity":1,"message":"126","line":35,"column":8,"nodeType":"122","endLine":35,"endColumn":10,"suggestions":"127"},{"ruleId":"115","severity":1,"message":"128","line":43,"column":11,"nodeType":"117","messageId":"118","endLine":43,"endColumn":18},{"ruleId":"115","severity":1,"message":"129","line":2,"column":131,"nodeType":"117","messageId":"118","endLine":2,"endColumn":141},{"ruleId":"130","severity":1,"message":"131","line":67,"column":64,"nodeType":"132","messageId":"133","endLine":67,"endColumn":66},{"ruleId":"115","severity":1,"message":"134","line":1,"column":29,"nodeType":"117","messageId":"118","endLine":1,"endColumn":38},{"ruleId":"115","severity":1,"message":"135","line":11,"column":11,"nodeType":"117","messageId":"118","endLine":11,"endColumn":18},{"ruleId":"115","severity":1,"message":"136","line":15,"column":12,"nodeType":"117","messageId":"118","endLine":15,"endColumn":23},{"ruleId":"115","severity":1,"message":"137","line":1,"column":8,"nodeType":"117","messageId":"118","endLine":1,"endColumn":13},{"ruleId":"115","severity":1,"message":"138","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":25},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'AppContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'context'. Either include it or remove the dependency array.","ArrayExpression",["141"],"'IconButton' is defined but never used.","'RefreshIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'context' and 'fetchData'. Either include them or remove the dependency array.",["142"],"'refresh' is assigned a value but never used.","'Typography' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'context' is assigned a value but never used.","'connections' is assigned a value but never used.","'React' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [context]",{"range":"147","text":"148"},"Update the dependencies array to be: [context, fetchData]",{"range":"149","text":"150"},[606,608],"[context]",[1077,1079],"[context, fetchData]"]